package graph;

/**
 * 图: 
 * 	分类一: 
 * 			- 无向图: 无向图指的是两个顶点之间形成的边是没有方向的, 代表了两个顶点相连, 是双向的
 * 			- 有向图: 有向图指的是两个顶点之间形成的边可以是有方向的, a -> b仅仅代表了a向b的边, 不能从b向a
 * 	分类二:
 * 			- 有权图: 有权图指的是两个顶点之间形成的边, 存在一个信息的描述, 比如一个数字, 可以代表两个顶点之间的距离
 * 			- 无权图:	 无权图指的是两个顶点之间仅仅形成了边, 这个边没有任何的信息描述
 * 图的连通性: 不一定要求一个顶点必须有双向来源, 即一个顶点可以指向其他点, 不一定需要其它点指向它, 同时可以将多个
 * 				图看成是一个图, 即使这多个图之间可能没有相连
 * 	
 * 特殊边的描述:
 * 			- 自环边, 表示一个顶点有一条指向其自身的边
 * 			- 平行边, 表示两个顶点之间可以有多条边(交通运输中可以有多条路)
 * 下面的学习主要以简单图为目标(即不存在自环边和平行边)
 * 		
 * 如何用代码来表示一张图:
 * 			方式一: 邻接矩阵
 * 						如果有n个顶点, 那么就存在n * n种情况, 通过布尔值来表示i -> j是否存在一条边
 * 						如: 数字代表顶点, 两个数字之间是否存在边则用布尔值来表示
 * 								0 1 2 3
 * 							0  b f b b
 * 							1  f b f f  
 * 							2  b f b b
 * 							3	b f b b
 * 			方式二: 邻接表
 * 							通过对每一个索引都创建一个链表(或者其它的), 链表中保存了与该顶点相连的顶点, 同时链表的长度也代表了与该定点相连的边的个数
 * 			一般用邻接表来表示一个稀疏图, 用邻接矩阵来表示一个稠密图/完全图(完全图是指每一个顶点与其它所有顶点都形成了一条边)
 * @author 
 */
public class Graph_Decription {

}
